name: Get PR commit SHA
on:
  workflow_call:
    inputs:
      pr_number:
        required: true
        type: string
    outputs:
      PR_HEAD_SHA_BAD:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha.outputs.PR_HEAD_SHA_BAD }}
      PR_MERGE_SHA_BAD:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha.outputs.PR_MERGE_SHA_BAD }}
      PR_HEAD_REPO_FULL_NAME:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_HEAD_REPO_FULL_NAME }}
      PR_BASE_REPO_FULL_NAME:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_BASE_REPO_FULL_NAME }}
      PR_HEAD_REPO_OWNER:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_HEAD_REPO_OWNER }}
      PR_BASE_REPO_OWNER:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_BASE_REPO_OWNER }}
      PR_HEAD_REPO_NAME:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_HEAD_REPO_NAME }}
      PR_BASE_REPO_NAME:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_BASE_REPO_NAME }}
      PR_HEAD_REF:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_HEAD_REF }}
      PR_BASE_REF:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_BASE_REF }}
      PR_HEAD_SHA:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_HEAD_SHA }}
      PR_BASE_SHA:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_BASE_SHA }}
      PR_MERGE_COMMIT_SHA:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_MERGE_COMMIT_SHA }}
      PR_HEAD_COMMIT_DATE:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_HEAD_COMMIT_DATE }}
      PR_MERGE_COMMIT_DATE:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR_MERGE_COMMIT_DATE }}
      PR:
        description: "The extracted PR commit SHA"
        value: ${{ jobs.get-pr-sha-better.outputs.PR }}

jobs:
  get-pr-sha:
    runs-on: ubuntu-22.04
    name: Get PR commit SHA
    outputs:
      PR_HEAD_SHA_BAD: ${{ steps.get_sha.outputs.PR_HEAD_SHA }}
      PR_MERGE_SHA_BAD: ${{ steps.get_sha.outputs.PR_MERGE_SHA }}
    if: ${{ inputs.pr_number != '' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          ref: "refs/pull/${{ inputs.pr_number }}/merge"

      - name: Get SHA (and verify timestamps against the issue comment date)
        id: get_sha
        env:
          PR_NUMBER: ${{ inputs.pr_number }}
        run: |
            git fetch origin refs/pull/$PR_NUMBER/head:refs/remotes/pull/$PR_NUMBER/head
            git checkout refs/remotes/pull/$PR_NUMBER/head
            echo "PR_HEAD_SHA: $(git log -1 --format=%H)"
            echo "PR_HEAD_SHA=$(git log -1 --format=%H)" >> "$GITHUB_OUTPUT"
            git fetch origin refs/pull/$PR_NUMBER/merge:refs/remotes/pull/$PR_NUMBER/merge
            git checkout refs/remotes/pull/$PR_NUMBER/merge
            echo "PR_MERGE_SHA: $(git log -1 --format=%H)"
            echo "PR_MERGE_SHA=$(git log -1 --format=%H)" >> "$GITHUB_OUTPUT"
            PR_MERGE_COMMIT_TIMESTAMP=$(git log -1 --date=unix --format=%cd)
            echo "PR_MERGE_COMMIT_TIMESTAMP: $PR_MERGE_COMMIT_TIMESTAMP"
            echo "COMMENT_TIMESTAMP: $COMMENT_TIMESTAMP"
            if [ $COMMENT_TIMESTAMP -le $PR_MERGE_COMMIT_TIMESTAMP ]; then
              echo "Last commit on the pull request is newer than the issue comment triggering this run! Abort!";
              exit -1;
            fi

  get-pr-sha-better:
    runs-on: ubuntu-22.04
    name: Get PR commit SHA better
    outputs:
      PR_HEAD_REPO_FULL_NAME: ${{ steps.pr_info.outputs.head_repo_full_name }}
      PR_BASE_REPO_FULL_NAME: ${{ steps.pr_info.outputs.base_repo_full_name }}
      PR_HEAD_REPO_OWNER: ${{ steps.pr_info.outputs.head_repo_owner }}
      PR_BASE_REPO_OWNER: ${{ steps.pr_info.outputs.base_repo_owner }}
      PR_HEAD_REPO_NAME: ${{ steps.pr_info.outputs.head_repo_name }}
      PR_BASE_REPO_NAME: ${{ steps.pr_info.outputs.base_repo_name }}
      PR_HEAD_REF: ${{ steps.pr_info.outputs.head_ref }}
      PR_BASE_REF: ${{ steps.pr_info.outputs.base_ref }}
      PR_HEAD_SHA: ${{ steps.pr_info.outputs.head_sha }}
      PR_BASE_SHA: ${{ steps.pr_info.outputs.base_sha }}
      PR_MERGE_COMMIT_SHA: ${{ steps.pr_info.outputs.merge_commit_sha }}
      PR_HEAD_COMMIT_DATE: ${{ steps.pr_info.outputs.head_commit_date }}
      PR_MERGE_COMMIT_DATE: ${{ steps.pr_info.outputs.merge_commit_date }}

      PR: ${{ steps.pr_info.outputs.pr }}
    if: ${{ inputs.pr_number != '' }}
    steps:
      - name: Extract PR details
        id: pr_info
        uses: actions/github-script@v6
        with:
          script: |            
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ inputs.pr_number }}
            });

            core.setOutput('head_repo_full_name', pr.head.repo.full_name);
            core.setOutput('base_repo_full_name', pr.base.repo.full_name);
            core.setOutput('head_repo_owner', pr.head.repo.owner.login);
            core.setOutput('base_repo_owner', pr.base.repo.owner.login);
            core.setOutput('head_repo_name', pr.head.repo.name);
            core.setOutput('base_repo_name', pr.base.repo.name);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('head_sha', pr.head.sha);
            core.setOutput('base_sha', pr.base.sha);
            core.setOutput('merge_commit_sha', pr.merge_commit_sha);
            core.setOutput('pr', pr);

            const { data: head_commit }  = await github.rest.repos.getCommit({
              owner: pr.head.repo.owner.login,
              repo: pr.head.repo.name,
              ref: pr.head.ref
            });

            const { data: merge_commit }  = await github.rest.repos.getCommit({
              owner: pr.base.repo.owner.login,
              repo: pr.base.repo.name,
              ref: pr.merge_commit_sha,
            });

            console.log('PR Details:', {
              head_commit: head_commit,
              commit: head_commit.commit,
              date: head_commit.commit.committer.date
            });

            console.log('PR Details 2:', {
              merge_commit: merge_commit,
              commit: merge_commit.commit,
              date: merge_commit.commit.committer.date,
            });
            
            core.setOutput('head_commit_date', pr);
            core.setOutput('merge_commit_date', pr);